#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('uryoutube.com:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);


var renewalTime = 91 * 24 * 60 * 60 * 1000;
var lexServer = 'https://acme-v01.api.letsencrypt.org/directory';
var domains = [ 'uryoutube.com', 'www.uryoutube.com' ];

/*var lex = require('greenlock-express').create({
    email: 'admin@uryoutube.com',
    agreeTos: true,
    server: lexServer,
    challenges: { 'http-01': require('le-challenge-fs').create({ webrootPath: '~/letsencrypt/tmp/acme-challenges' }) },
    store: require('le-store-certbot').create({ webrootPath: '~/letsencrypt/tmp/acme-challenges' }),
    approveDomains: function approveDomains(opts, certs, cb) {
        // This is where you check your database and associated
        // email addresses with domains and agreements and such


        // The domains being approved for the first time are listed in opts.domains
        // Certs being renewed are listed in certs.altnames
        if (certs) {
            opts.domains = certs.altnames;
        }
        else {
            opts.email = 'admin@uryoutube.com';
            opts.agreeTos = true;
            opts.domains = domains;
        }

        // NOTE: you can also change other options such as `challengeType` and `challenge`
        // opts.challengeType = 'http-01';
        // opts.challenge = require('le-challenge-fs').create({});

        cb(null, { options: opts, certs: certs });
    },
    renewWithin: renewalTime,
    renewBy: renewalTime,
    debug: true
});*/


/**
 * Create HTTP server.
 */

// handles acme-challenge and redirects to https
/*require('http').createServer(lex.middleware(require('redirect-https')())).listen(port, function () {
    console.log("Listening for ACME http-01 challenges on", this.address());
});*/

var server = http.createServer(app);

// handles your app
/*var server = require('https').createServer(lex.httpsOptions, lex.middleware(app)).listen(443, function () {
    console.log("Listening for ACME tls-sni-01 challenges and serve app on", this.address());
});*/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
